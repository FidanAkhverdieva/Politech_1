# Лабораторная №2


#1) Есть два файла с данными турагенства: email.csv и username.csv.
# C ними нужно проделать все манипуляции, указанные в лекции 2, а именно:
# a)	Группировка и агрегирование ( сгруппировать набор данных по значениям в столбце,
# а затем вычислить среднее значение для каждой группы)
# b)	Обработка отсутствующих данных (заполнение отсутствующих значений определенным значением
# или интерполяция отсутствующих значений)
# c)	Слияние и объединение данных (соединить два DataFrames в определенном столбце)

import pandas as pd
df = pd.read_csv('email.csv', delimiter=',') #, delimiter=r"\s+"
df2 = pd.read_csv('username.csv')
merged_data = pd.merge(df, df2, on='First name', how='inner') # объединение по столбцу First name
print("Merged data\n", merged_data)

df = df.fillna(method='pad') #заполнение отсутствующих значений предыдущими
print(df)
grouped_data = df.groupby('Total price').groups #группировка по столбцу
print(grouped_data)



# 2) Преобразование данных (pivot):
# a) Нужно создать сводную таблицу так, чтобы в index были столбцы “Rep”, “Manager” и “Product”, а в values “Price” и
# “Quantity”. Также нужно использовать функцию aggfunc=[numpy.sum] и заполнить отсутствующие значения нулями. В итоге
# можно будет увидеть количество проданных продуктов и их стоимость, отсортированные по имени менеджеров и директоров.
# b) Учебный файл (data.csv) + практика Dataframe.pivot. Поворот фрейма данных и суммирование повторяющихся значений.


import pandas as pd
import numpy
df = pd.read_csv('sales.csv')
pivoted_sales = df.pivot_table(index=['Rep', 'Manager', 'Product'], columns='Account',  values=['Price', 'Quantity'], aggfunc=[numpy.sum])
print(pivoted_sales)
df = pd.read_csv('data.csv')
pivoted_data = df.pivot_table(index='Date', columns='Product', values='Sales', aggfunc='sum')
print(pivoted_data)



#3) Визуализация данных (можно использовать любой из учебных csv-файлов).
# a) Необходимо создать простой линейный график из файла csv (два любых столбца, в которых есть зависимость)


import pandas as pd

import matplotlib.pyplot as plt
# Загружаем данные из файла cars.csv
df = pd.read_csv('cars.csv')

# Выбираем столбцы "Weight" и "MPG"
x = df['Weight']
y = df['MPG']

# Строим график
plt.plot(x, y, 'o', markersize=2)
plt.xlabel('Weight')
plt.ylabel('MPG')
plt.title('Зависимость расхода топлива от веса автомобиля')
plt.show()



# 3 b) Создание визуализации распределения набора данных. Создать произвольный датасет через np.random.normal
# или использовать датасет из csv-файлов, потом построить гистограмму.

import numpy as np
import matplotlib.pyplot as plt

# Создаем произвольный датасет с помощью np.random.normal
data = np.random.normal(0, 1, 1000) # 1000 значений, среднее 0, стандартное отклонение 1

# Строим гистограмму
plt.hist(data, bins=30, edgecolor='black')
plt.xlabel('Значения')
plt.ylabel('Количество')
plt.title('Распределение данных')
plt.show()



# 3 c) Сравнение нескольких наборов данных на одном графике. Создать два набора данных с нормальным распределением
# или использовать данные из файлов. Оба датасета отразить на одной оси, добавить легенду и название.

import numpy as np
import matplotlib.pyplot as plt

# Создаем два набора данных с нормальным распределением
data1 = np.random.normal(0, 1, 1000)
data2 = np.random.normal(1, 1.5, 1000)

# Строим график
plt.hist(data1, bins=20, alpha=0.5, label='Набор данных 1')
plt.hist(data2, bins=20, alpha=0.5, label='Набор данных 2')
plt.legend(loc='upper right')
plt.xlabel('Значения')
plt.ylabel('Частота')
plt.title('Сравнение двух наборов данных')
plt.show()


# 3 d) Построение математической функции. Создать данные для x и y (где x это numpy.linspace, а y - заданная в
# условии варианта математическая функция). Добавить легенду и название графика.
# i.	Вариант 1 - функция sin
# ii.	Вариант 2 - функция cos

import numpy as np
import matplotlib.pyplot as plt

# Создаем данные для x и y
x = np.linspace(10 * -np.pi, 10 * np.pi, 200)
y = np.sin(x)

# Строим график
plt.plot(x, y, label='sin(x)')
plt.legend(loc='lower left')
plt.xlabel('x')
plt.ylabel('y')
plt.title('График функции sin(x)')
plt.show()



# 3 e) Моделирование простой анимации. Создать данные для x и y (где x это numpy.linspace, а y - математическая
# функция). Запустить объект line, ввести функцию animate(i) c методом line.set_ydata() и создать анимированный объект
# FuncAnimation.
# a)	Шаг 1: смоделировать график sin(x) (или cos(x)) в движении.
# b)	Шаг 2: добавить к нему график cos(x) (или sin(x)) так, чтобы движение шло одновременно и оба графика
# отображались на одной оси.

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Создаем данные для x и y
x = np.linspace(0, 2*np.pi, 100)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Создаем график и линию, которую будем анимировать
fig, ax = plt.subplots()
line_sin, = ax.plot(x, y_sin, label='sin(x)')
line_cos, = ax.plot(x, y_cos, label='cos(x)')
ax.set_xlim(0, 2*np.pi)
ax.set_ylim(-1, 1)

# Функция, которая будет вызываться на каждом шаге анимации
def animate(i):
    line_sin.set_ydata(np.sin(x + i/10))
    line_cos.set_ydata(np.cos(x + i/10))
    return line_sin, line_cos,

# Создаем анимацию
ani = FuncAnimation(fig, animate, frames=100, interval=50, blit=True)

# Отображаем график и анимацию
plt.legend()
plt.show()



# 4) Загрузка CSV-файла в DataFrame. Используя pandas, напишите скрипт, который загружает CSV-файл в DataFrame и
# отображает первые 5 строк df.
import pandas as pd

df = pd.read_csv("data.csv")
print(df.head(5))



# 5) Выбор столбцов из DataFrame.
# a)	Используя pandas, напишите сценарий, который из DataFrame файла sales.csv выбирает только те строки, в которых
# Status = presented, и сортирует их по цене от меньшего к большему.

import pandas as pd

df = pd.read_csv("sales.csv")  # загрузка данных в DataFrame
presented_df = df[df['Status'] == 'presented']  # выбор строк, в которых Status = presented
sorted_df = presented_df.sort_values(by=['Price'])  # сортировка по цене от меньшего к большему
print(sorted_df)



# 5 b)	Из файла climate.csv отображает в виде двух столбцов названия и коды (rw_country_code) тех стран,
# у которых cri_score больше 100, а fatalities_total не более 10.

import pandas as pd

# загрузка файла
df = pd.read_csv('climate.csv')

# выбор строк, удовлетворяющих условиям
selected = df[(df['cri_score'] > 100) & (df['fatalities_total'] <= 10)]

# отображение названий и кодов выбранных стран
result = selected[['country', 'rw_country_code']]
print(result)



# 5 c) Из файла cars.csv отображает названия 50 первых американских машин, у которых расход топлива MPG не менее
# 25, а частное внутреннего объема (Displacement) и количества цилиндров не более 40. Названия машин нужно вывести
# в алфавитном порядке.

import pandas as pd

# 1. Считываем данные из файла cars.csv
df = pd.read_csv('cars.csv')

# 2. Фильтруем машины по заданным условиям
filtered_cars = df[(df['MPG'] >= 25) & (df['Displacement']/df['Cylinders'] <= 40)]

# 3. Сортируем полученный список машин по названию в алфавитном порядке
filtered_cars.sort_values(by='Car', inplace=True)

# 4. Выводим названия 50 первых машин из полученного списка
for car in filtered_cars['Car'][:50]:
    print(car)



# 6) Вычисление статистики для массива numpy
# Используя numpy, напишите скрипт, который загружает файл CSV в массив numpy и вычисляет среднее значение, стандартное
# отклонение и максимальное значение массива. Для тренировки используйте файл data.csv, а потом любой другой csv-файл от
# 20 строк.


import numpy as np
import csv

# Загрузка файла CSV в массив NumPy
data = np.genfromtxt('homes.csv', delimiter=',', skip_header=1, usecols=(0,1,2,3,4,5,6,7,8))
# data = np.genfromtxt('data.csv', delimiter=',', skip_header=1, usecols=(1,))


# Вычисление статистики
mean = np.mean(data, axis=0)
std = np.std(data, axis=0)
max_value = np.max(data, axis=0)

# Вывод результатов
print("Средние значения: ", mean)
print("Стандартные отклонения: ", std)
print("Максимальные значения: ", max_value)



#7) Операции с матрицами: Используя numpy, напишите сценарий, который создает матрицу и выполняет основные
# математические операции, такие как сложение, вычитание, умножение и транспонирование матрицы.

import numpy as np

# Создание матриц
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
B = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])

# Сложение матриц
C = A + B
print("Сумма матриц A и B:\n", C)

# Вычитание матриц
D = A - B
print("Разность матриц A и B:\n", D)

# Умножение матриц
E = A.dot(B)
print("Произведение матриц A и B:\n", E)

# Транспонирование матрицы A
F = A.T
print("Транспонированная матрица A:\n", F)
